def terminologiesGeneration(doc,application_name,application_description):

    # Section 2 
    # sec2_prompt="Draft the Terminologies section of the software design document for the given application. This section should include all relevant abbreviations and acronyms. give the description for each abbreviation in json format\n Application context:{app_context}".format(app_context=application_description)
    terminologies_prompt="""Draft the abbreviations section of the software design document for the given application. This section should include only the abbreviations present in the application context given.Strictly don't repeat the same abbreviations in the response. \n Application context:{app_context}
    
    For each abbreviation it should be in format with only abbreviation and it's expansion as [Abbreviation:abbreviation , Expansion : expansion]. Give the valid json as the response.
   
    Note to be considered while response generation: Strictly make sure the resultant json is valid and there is no comma(,) before '}}' in json and ] in list of pseudo code.
    "When working with JSON data, strictly ensure it follows these guidelines to avoid parsing errors:",
    "1. Property Names Enclosed in Double Quotes: Ensure all property names (keys) are enclosed in double quotes (\")."
    "2. No Trailing Commas: Remove any trailing commas at the end of arrays or objects."
    "3. Valid Array and Object Syntax: Ensure arrays and objects are properly formatted with opening and closing brackets or braces."
    "4. Use Valid Data Types: Ensure values in the JSON data are of valid data types (strings, numbers, booleans, arrays, objects, or null).""".format(app_context=application_description)
    
    terminlogies_response=make_completion_gpt4(terminologies_prompt)
   
    
    try:
        terminlogies_response=json.loads(str(terminlogies_response))
        
    except json.JSONDecodeError as e:
        corrected_json_string = re.sub(r',\s*}', '}', terminlogies_response)
        terminlogies_response=json.loads(corrected_json_string)
    # writeoncsv(csvpath,"Terminologies",str(terminlogies_response))
    df1 = pd.DataFrame.from_dict(terminlogies_response, orient='index')
    replace_table_with_df(doc, 1, df1)
