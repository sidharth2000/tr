import os
import requests
import tarfile

def download_docker_image(image_name, tag="latest", output_file="docker_image.tar"):
    base_url = "https://registry.hub.docker.com/v2"
    headers = {"Accept": "application/vnd.docker.distribution.manifest.v2+json"}
    
    # Step 1: Get the token for the Docker Hub registry
    auth_url = f"https://auth.docker.io/token?service=registry.docker.io&scope=repository:{image_name}:pull"
    auth_response = requests.get(auth_url)
    auth_response.raise_for_status()
    token = auth_response.json()["token"]
    headers["Authorization"] = f"Bearer {token}"
    
    # Step 2: Get the manifest for the image
    manifest_url = f"{base_url}/repositories/{image_name}/tags/{tag}"
    manifest_response = requests.get(manifest_url, headers=headers)
    manifest_response.raise_for_status()
    digest = manifest_response.json()["images"][0]["digest"]
    
    # Get the full manifest
    full_manifest_url = f"https://registry-1.docker.io/v2/{image_name}/manifests/{digest}"
    full_manifest_response = requests.get(full_manifest_url, headers=headers)
    full_manifest_response.raise_for_status()
    full_manifest = full_manifest_response.json()
    
    # Step 3: Download all layers
    layers = full_manifest["layers"]
    layer_files = []
    for layer in layers:
        layer_digest = layer["digest"]
        layer_url = f"https://registry-1.docker.io/v2/{image_name}/blobs/{layer_digest}"
        
        print(f"Downloading layer: {layer_digest}")
        layer_response = requests.get(layer_url, headers=headers, stream=True)
        layer_response.raise_for_status()
        
        # Save the layer to a temporary file
        layer_file = f"{layer_digest.replace(':', '_')}.tar"
        with open(layer_file, "wb") as f:
            for chunk in layer_response.iter_content(chunk_size=1024 * 1024):  # 1 MB chunks
                f.write(chunk)
        layer_files.append(layer_file)
    
    # Step 4: Combine layers into a single tar file
    print(f"Combining layers into {output_file}")
    with tarfile.open(output_file, "w") as tar:
        for layer_file in layer_files:
            tar.add(layer_file, arcname=os.path.basename(layer_file))
            os.remove(layer_file)  # Clean up individual layer files
    
    print(f"Image saved to {output_file}")

# Example usage
if __name__ == "__main__":
    image_name = "milvusdb/milvus"  # Replace with your desired image
    tag = "latest"  # Replace with your desired tag
    output_file = "milvus_image.tar"
    download_docker_image(image_name, tag, output_file)
