from sqlalchemy import create_engine, Column, Integer, String, MetaData, Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

# Define the base for the models
Base = declarative_base()

# Define the model class for your table (adjust as needed)
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(50), nullable=False)
    email = Column(String(100), nullable=False)

# Database connection strings
mariadb_engine = create_engine(
    "mysql+mysqlconnector://mariadb_user:mariadb_password@localhost/mariadb_database"
)
postgresql_engine = create_engine(
    "postgresql+psycopg2://postgres_user:postgres_password@localhost/postgres_database"
)

# Create session factories
MariaDBSession = sessionmaker(bind=mariadb_engine)
PostgresSession = sessionmaker(bind=postgresql_engine)

# Create tables in PostgreSQL if they do not exist
Base.metadata.create_all(postgresql_engine)

# Copy data row by row
def migrate_data():
    # Start a session for MariaDB and PostgreSQL
    mariadb_session = MariaDBSession()
    postgres_session = PostgresSession()

    try:
        # Query all records from the MariaDB table
        logging.info("Querying records from MariaDB...")
        users = mariadb_session.query(User).all()

        logging.info(f"Fetched {len(users)} records from MariaDB.")

        for user in users:
            # Create a new User instance for PostgreSQL
            new_user = User(
                username=user.username,
                email=user.email
            )

            # Add the new user to the PostgreSQL session
            postgres_session.add(new_user)

        # Commit all records to PostgreSQL
        postgres_session.commit()
        logging.info("Data migrated successfully to PostgreSQL.")

    except Exception as e:
        logging.error(f"An error occurred during migration: {e}")
        postgres_session.rollback()
    finally:
        # Close both sessions
        mariadb_session.close()
        postgres_session.close()

# Run the migration
if __name__ == "__main__":
    migrate_data()


 user_data = vars(user).copy()
            user_data.pop('_sa_instance_state', None)  # Remove SQLAlchemy's internal state
            user_data.pop('id', None)
def model_to_dict(model):
    return {c.key: getattr(model, c.key) for c in inspect(model).mapper.column_attrs}

postgres_session.execute(
                User.__table__.insert().values(user_data).prefix_with('your_schema_name.')
            )

SELECT setval('your_table_name_id_seq', (SELECT MAX(id) FROM your_table_name));


\b([A-Z][a-zA-Z0-9_]*)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b
\b([A-Z][a-zA-Z0-9_]*)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b


