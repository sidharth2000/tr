import os
from moviepy.editor import VideoFileClip
import cv2
import numpy as np

def split_video_and_extract_keyframes(video_path):
    # Create the output folder for splits
    base_filename = os.path.splitext(os.path.basename(video_path))[0]
    output_folder = f"{base_filename}_splits"
    os.makedirs(output_folder, exist_ok=True)
    
    # Load the video
    video = VideoFileClip(video_path)
    duration = video.duration  # in seconds
    split_duration = 10 * 60  # 10 minutes in seconds
    
    # Split video into 10-minute segments
    segment_files = []
    for i in range(0, int(duration), split_duration):
        start_time = i
        end_time = min(i + split_duration, duration)
        split_filename = f"{base_filename}_{i // split_duration + 1}.mp4"
        segment_files.append(os.path.join(output_folder, split_filename))
        video.subclip(start_time, end_time).write_videofile(segment_files[-1], codec="libx264")
    
    # Function to extract keyframes and timestamps
    def extract_keyframes_from_video(video_path):
        cap = cv2.VideoCapture(video_path)
        fps = cap.get(cv2.CAP_PROP_FPS)
        prev_frame = None
        keyframes = []
        timestamps = []

        frame_count = 0
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            frame_count += 1
            timestamp = frame_count / fps  # timestamp in seconds

            if prev_frame is not None:
                # Compare the current frame with the previous one
                diff = cv2.absdiff(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY))
                non_zero_count = np.count_nonzero(diff)

                # If significant change is detected, treat this as a keyframe
                if non_zero_count > 10000:  # You can adjust this threshold based on the video's content
                    keyframes.append(frame)
                    timestamps.append(timestamp)
            
            prev_frame = frame
        
        cap.release()
        return keyframes, timestamps

    # Iterate over splits and extract keyframes
    all_keyframes = []
    all_timestamps = []
    
    for segment_file in segment_files:
        keyframes, timestamps = extract_keyframes_from_video(segment_file)
        all_keyframes.extend(keyframes)
        all_timestamps.extend(timestamps)
        
    # Save keyframes as images and print the timestamps
    for idx, (keyframe, timestamp) in enumerate(zip(all_keyframes, all_timestamps)):
        keyframe_filename = os.path.join(output_folder, f"keyframe_{idx+1}_{int(timestamp)}s.jpg")
        cv2.imwrite(keyframe_filename, keyframe)
        print(f"Keyframe {idx+1} at {timestamp} seconds saved as {keyframe_filename}")

# Example usage
video_path = "your_large_video.mp4"  # Replace with your video file path
split_video_and_extract_keyframes(video_path)
