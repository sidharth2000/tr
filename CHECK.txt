import sqlparse

def chunk_sql_with_sqlparser(sql_text, max_chunk_size=4000):
    parsed = sqlparse.parse(sql_text)
    statements = [str(stmt).strip() for stmt in parsed if str(stmt).strip()]

    chunks = []
    current_chunk = ""

    for stmt in statements:
        if len(current_chunk) + len(stmt) + 1 <= max_chunk_size:
            current_chunk += f"\n{stmt}"
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = stmt

    if current_chunk:
        chunks.append(current_chunk.strip())

    return chunks

def chunk_sql_code_custom(sql_code, max_chunk_size=1000):
    lines = sql_code.replace('\r\n', '\n').split('\n')

    chunks = []
    current_chunk = []
    current_size = 0
    statement_buffer = []
    parentheses_depth = 0
    in_statement = False

    for line in lines:
        line_stripped = line.strip()
        if not line_stripped:
            if statement_buffer:
                statement_buffer.append(line)
            else:
                current_chunk.append(line)
            continue

        open_parens = line.count('(')
        close_parens = line.count(')')

        if not in_statement and line_stripped and not line_stripped.startswith('--') and not line_stripped.startswith('/*'):
            in_statement = True

        parentheses_depth += open_parens - close_parens
        statement_buffer.append(line)

        if line_stripped.endswith(';') and parentheses_depth <= 0:
            statement = '\n'.join(statement_buffer)
            statement_size = len(statement)

            if statement_size > max_chunk_size:
                if current_chunk:
                    chunks.append('\n'.join(current_chunk))
                    current_chunk = []
                chunks.append(statement)
            elif current_size + statement_size > max_chunk_size and current_chunk:
                chunks.append('\n'.join(current_chunk))
                current_chunk = statement_buffer
                current_size = statement_size
            else:
                current_chunk.extend(statement_buffer)
                current_size += statement_size

            statement_buffer = []
            in_statement = False
            parentheses_depth = 0

    if statement_buffer:
        statement = '\n'.join(statement_buffer)
        if current_size + len(statement) > max_chunk_size and current_chunk:
            chunks.append('\n'.join(current_chunk))
            current_chunk = []
        current_chunk.extend(statement_buffer)

    if current_chunk:
        chunks.append('\n'.join(current_chunk))

    return chunks

def save_chunks(chunks, output_filename="final_chunked_sql.txt"):
    with open(output_filename, "w") as f:
        for idx, chunk in enumerate(chunks, start=1):
            f.write(f"-- Final Chunk {idx} (Length: {len(chunk)} characters) --\n")
            f.write(chunk + "\n\n")

def combined_sql_chunking(input_file, intermediate_file, final_output_file, parser_chunk_size=4000, custom_chunk_size=1000):
    with open(input_file, "r", encoding="utf-8") as f:
        sql_text = f.read()

    # First-level chunking using sqlparser
    parser_chunks = chunk_sql_with_sqlparser(sql_text, max_chunk_size=parser_chunk_size)

    with open(intermediate_file, "w", encoding="utf-8") as f:
        for idx, chunk in enumerate(parser_chunks, start=1):
            f.write(f"-- Parser Chunk {idx} --\n{chunk}\n\n")

    # Second-level chunking using custom logic
    all_final_chunks = []
    for chunk in parser_chunks:
        final_chunks = chunk_sql_code_custom(chunk, max_chunk_size=custom_chunk_size)
        all_final_chunks.extend(final_chunks)

    # Save final chunks
    save_chunks(all_final_chunks, output_filename=final_output_file)
    print(f"Total final chunks created: {len(all_final_chunks)}")

def main():
    input_file = "dummy_sql_data.txt"
    intermediate_file = "intermediate_sqlparser_chunks.txt"
    final_output_file = "final_split_sql_chunks.txt"

    combined_sql_chunking(
        input_file,
        intermediate_file,
        final_output_file,
        parser_chunk_size=4000,
        custom_chunk_size=1000
    )

if __name__ == "__main__":
    main()
