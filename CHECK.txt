import spacy
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from model import FuzeUserEducationIssue  # your SQLAlchemy model

# ---------- CONFIG ----------
DATABASE_URL = "postgresql://username:password@localhost/dbname"  # Update this
TOP_N = 3
# ----------------------------

# Load spaCy medium model with word vectors
nlp = spacy.load("en_core_web_md")

# Connect to DB and fetch issues
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()
issues = session.query(FuzeUserEducationIssue).all()
session.close()

def score_match_spacy(description: str, keywords: list[str]) -> float:
    if not keywords:
        return 0.0

    desc_doc = nlp(description.lower())
    exact_matches = 0
    semantic_scores = []

    for kw in keywords:
        kw = kw.lower()
        if kw in description.lower():
            exact_matches += 1
            semantic_scores.append(1.0)  # exact match boost
        else:
            kw_doc = nlp(kw)
            sim = desc_doc.similarity(kw_doc)
            semantic_scores.append(sim)

    exact_score = exact_matches / len(keywords)
    avg_semantic = sum(semantic_scores) / len(semantic_scores)
    final_score = round(0.5 * exact_score + 0.5 * avg_semantic, 4)
    return final_score

def find_top_matches(description: str):
    results = []

    for issue in issues:
        keywords = issue.keywords or []
        score = score_match_spacy(description, keywords)
        results.append({
            'issue_id': issue.issue_id,
            'issue_name': issue.issue_name,
            'module': issue.module,
            'score': score
        })

    results.sort(key=lambda x: x['score'], reverse=True)
    return results[:TOP_N]

# ----------- Example Usage -----------
if __name__ == "__main__":
    ticket = {
        "description": "Please change the budget code for this report"
    }

    top_matches = find_top_matches(ticket['description'])
    for match in top_matches:
        print(f"Issue ID: {match['issue_id']} | Score: {match['score']}")
        print(f"  Name: {match['issue_name']} | Module: {match['module']}")
